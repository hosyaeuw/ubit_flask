{"version":3,"sources":["pages/admin/lists/TrainerList.jsx","pages/admin/lists/DancerList.jsx","pages/admin/lists/NewsList.jsx","pages/admin/lists/GroupList.jsx","pages/admin/forms/TrainerForm.jsx","pages/admin/forms/NewsForm.jsx","pages/admin/forms/DancerForm.jsx","pages/admin/forms/GroupForm.jsx","pages/admin/Admin.jsx"],"names":["TrainerList","dispatch","useSelector","checkedItems","setCheckedItems","Table","items","trainers","React","useEffect","fetchGetTrainers","headers","editUrl","deleteClick","id","window","confirm","fetchDeleteTrainer","data","DancerList","dancers","fetchGetDancers","fetchDeleteDancer","NewsList","news","fetchGetNews","fetchDeleteNews","GroupList","groups","fetchGetGroups","fetchDeleteGroup","formArrayObj","label","name","validation","TrainerForm","match","params","isAddMode","initialFormValues","initialValidationValues","forEach","obj","Yup","required","validationSchema","shape","createGroup","fields","setSubmitting","resetForm","axios","post","then","updateGroup","put","setFieldValueRef","useRef","get","map","field","current","console","log","initialValues","onSubmit","setStatus","errors","touched","isSubmitting","setFieldValue","formObj","type","className","cn","component","disabled","to","NewsForm","useState","options","setOptions","FormikInput","componentProps","size","view","nameComponent","width","FormikSelect","mode","placeholder","FormikQuill","create","update","length","value","text","formTitle","FieldValueRefHandle","FieldValueRef","BtnComponent","props","DancerForm","FormikPhoneInput","mask","FormikCalendarInput","calendar","from_age","age_to","GroupForm","Admin","history","useDispatch","selectedDelete","path","from","exact","render"],"mappings":"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","file":"static/js/3.67d05a3e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { fetchGetTrainers, fetchDeleteTrainer } from '../../../redux/actions/trainers'\r\n\r\nconst TrainerList = ({ dispatch, useSelector, checkedItems, setCheckedItems, Table }) => {\r\n    const items = useSelector(({ trainers }) => trainers.items);\r\n\r\n    const editUrl = '/admin/trainers/edit'\r\n\r\n    const headers = ['ФИО', 'Телефон', 'Логин']\r\n    const data = ['fio', 'phone', 'login']\r\n\r\n    const deleteClick = (id) => {\r\n        if (window.confirm(`Вы действительно хотите удалить тренера?`)) {\r\n            dispatch(fetchDeleteTrainer(id))\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchGetTrainers())\r\n        setCheckedItems([])\r\n    }, [dispatch, setCheckedItems])\r\n    return (\r\n        <Table\r\n            headers={headers}\r\n            items={items}\r\n            checkedItems={checkedItems}\r\n            setCheckedItems={setCheckedItems}\r\n            editUrl={editUrl}\r\n            deleteClick={deleteClick}\r\n            data={data}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TrainerList\r\n","import React from 'react'\r\nimport { fetchGetDancers, fetchDeleteDancer } from '../../../redux/actions/dancers'\r\n\r\nconst DancerList = ({ dispatch, useSelector, checkedItems, setCheckedItems, Table }) => {\r\n    const items = useSelector(({ dancers }) => dancers.items);\r\n\r\n    const editUrl = '/admin/dancers/edit'\r\n\r\n    const headers = ['ФИО', 'Телефон', 'Логин', 'Дата рождения']\r\n    const data = ['fio', 'phone', 'login', 'birthday']\r\n\r\n    const deleteClick = (id) => {\r\n        if (window.confirm(`Вы действительно хотите удалить танцора?`)) {\r\n            dispatch(fetchDeleteDancer(id))\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchGetDancers())\r\n        setCheckedItems([])\r\n    }, [dispatch, setCheckedItems])\r\n    return (\r\n        <Table\r\n            headers={headers}\r\n            items={items}\r\n            checkedItems={checkedItems}\r\n            setCheckedItems={setCheckedItems}\r\n            editUrl={editUrl}\r\n            deleteClick={deleteClick}\r\n            data={data}\r\n        />\r\n    )\r\n}\r\n\r\nexport default DancerList\r\n","import React from 'react'\r\nimport { fetchGetNews, fetchDeleteNews } from '../../../redux/actions/news'\r\n\r\nconst NewsList = ({ dispatch, useSelector, checkedItems, setCheckedItems, Table }) => {\r\n    const items = useSelector(({ news }) => news.items);\r\n\r\n    const editUrl = '/admin/news/edit'\r\n\r\n    const headers = ['Название статьи', 'Дата', 'Тип новости']\r\n    const data = ['title', 'date', 'news_type']\r\n\r\n    const deleteClick = (id) => {\r\n        if (window.confirm(`Вы действительно хотите удалить новость?`)) {\r\n            dispatch(fetchDeleteNews(id))\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchGetNews())\r\n        setCheckedItems([])\r\n    }, [dispatch, setCheckedItems])\r\n    return (\r\n        <Table\r\n            headers={headers}\r\n            items={items}\r\n            checkedItems={checkedItems}\r\n            setCheckedItems={setCheckedItems}\r\n            editUrl={editUrl}\r\n            deleteClick={deleteClick}\r\n            data={data}\r\n        />\r\n    )\r\n}\r\n\r\nexport default NewsList\r\n","import React from 'react'\r\nimport { fetchGetGroups, fetchDeleteGroup } from '../../../redux/actions/groups'\r\n\r\nconst GroupList = ({ dispatch, useSelector, checkedItems, setCheckedItems, Table }) => {\r\n    const items = useSelector(({ groups }) => groups.items);\r\n\r\n    const editUrl = '/admin/groups/edit'\r\n\r\n    const headers = ['От скольки лет', 'До скольки лет', 'Стоимость']\r\n    const data = ['from_age', 'age_to', 'price']\r\n\r\n    const deleteClick = (id) => {\r\n        if (window.confirm(`Вы действительно хотите удалить группу?`)) {\r\n            dispatch(fetchDeleteGroup(id))\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchGetGroups())\r\n        setCheckedItems([])\r\n    }, [dispatch, setCheckedItems])\r\n    return (\r\n        <Table\r\n            headers={headers}\r\n            items={items}\r\n            checkedItems={checkedItems}\r\n            setCheckedItems={setCheckedItems}\r\n            editUrl={editUrl}\r\n            deleteClick={deleteClick}\r\n            data={data}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GroupList\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport cn from \"classnames\"\r\nimport axios from 'axios';\r\nimport { forEach, map } from 'lodash'\r\n\r\nconst formArrayObj = [\r\n    {\r\n        label: 'ФИО',\r\n        name: 'fio',\r\n        validation: 'ФИО обязательное поле'\r\n    },\r\n    {\r\n        label: 'Телефон:',\r\n        name: 'phone',\r\n        validation: 'Телефон обязательное поле'\r\n    }\r\n]\r\n\r\nconst TrainerForm = ({ match }) => {\r\n    const { id } = match.params;\r\n    const isAddMode = !id;\r\n\r\n    const initialFormValues = {}\r\n    const initialValidationValues = {}\r\n    forEach(formArrayObj, obj => {\r\n        initialFormValues[obj.name] = '';\r\n        initialValidationValues[obj.name] = Yup.string().required(obj.validation)\r\n    })\r\n\r\n    const validationSchema = Yup.object().shape(initialValidationValues);\r\n\r\n    const onSubmit = (fields, { setStatus, setSubmitting, resetForm }) => {\r\n        setStatus();\r\n        if (isAddMode) {\r\n            createGroup(fields, setSubmitting, resetForm);\r\n        } else {\r\n            updateGroup(fields, setSubmitting, resetForm);\r\n        }\r\n    }\r\n\r\n    const createGroup = (fields, setSubmitting, resetForm) => {\r\n        axios.post('/api/trainers/add', fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const updateGroup = (fields, setSubmitting, resetForm) => {\r\n        fields['id'] = id\r\n        axios.put(`/api/trainers/update/${id}`, fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const setFieldValueRef = React.useRef(null)\r\n\r\n    React.useEffect(() => {\r\n        if (!isAddMode) {\r\n            axios.get(`/api/trainers/get/${id}`).then(({ data }) => {\r\n                const fields = map(formArrayObj, obj => obj.name);\r\n                forEach(fields, field => setFieldValueRef.current(field, data[field], false));\r\n            })\r\n        }\r\n    }, [isAddMode, id]);\r\n    console.log(validationSchema)\r\n    return (\r\n        <Formik initialValues={initialFormValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n            {({ errors, touched, isSubmitting, setFieldValue }) => {\r\n                setFieldValueRef.current = setFieldValue\r\n                return (\r\n                    <Form>\r\n                        <h1>{isAddMode ? 'Добавление' : 'Изменение'} Группы</h1>\r\n                        {map(formArrayObj, (formObj => (\r\n                            <div key={formObj.name}>\r\n                                <label>{formObj.label}</label>\r\n                                <div>\r\n                                    <Field\r\n                                        name={formObj.name}\r\n                                        type=\"text\"\r\n                                        className={cn('form-control', { 'is-invalid': errors[formObj.name] && touched[formObj.name] })} />\r\n                                    <ErrorMessage name={formObj.name} component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                            </div>\r\n                        )))}\r\n                        <div>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                {isAddMode ? 'Добавить' : 'Изменить'}\r\n                            </button>\r\n                            <Link to=\"trainers/list\">Отмена</Link>\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default TrainerForm;","import React from 'react'\r\n\r\nimport { FormikForm, FormikQuill, FormikInput, FormikSelect, AdminBtnsBlock } from '../components'\r\n\r\nimport { forEach } from 'lodash'\r\nimport axios from 'axios'\r\nimport { map } from 'lodash'\r\nimport * as Yup from 'yup';\r\n\r\nconst NewsForm = ({ match }) => {\r\n    const { id } = match.params;\r\n    const isAddMode = !id;\r\n    const [options, setOptions] = React.useState([])\r\n\r\n    const formObj = {\r\n        items: [\r\n            {\r\n                name: 'title',\r\n                validation: 'От скольки лет - обязательное поле',\r\n                component: FormikInput,\r\n                componentProps: {\r\n                    label: 'Название',\r\n                    size: 'm',\r\n                    view: 'line',\r\n                    nameComponent: 'title',\r\n                    id: 'title',\r\n                    width: 'available'\r\n                }\r\n            },\r\n            {\r\n                name: 'news_type',\r\n                validation: 'До сколько лет -  обязательное поле',\r\n                component: FormikSelect,\r\n                componentProps: {\r\n                    label: 'Тип новости',\r\n                    nameComponent: 'news_type',\r\n                    id: 'news_type',\r\n                    size: 'm',\r\n                    options: options,\r\n                    mode: 'radio',\r\n                    view: 'line',\r\n                    width: 'available',\r\n                    placeholder: ' '\r\n                }\r\n            },\r\n            {\r\n                name: 'text',\r\n                validation: 'Стоимость - обязательное поле',\r\n                component: FormikQuill,\r\n                componentProps: {\r\n                    nameComponent: 'text',\r\n                    id: 'text',\r\n                }\r\n            },\r\n        ]\r\n    }\r\n\r\n    const onSubmit = (fields, { setStatus, setSubmitting, resetForm }) => {\r\n        setStatus();\r\n        fields['news_type_id'] = fields['news_type'][0]\r\n        if (isAddMode) {\r\n            create(fields, setSubmitting, resetForm);\r\n        } else {\r\n            update(fields, setSubmitting, resetForm);\r\n        }\r\n\r\n    }\r\n\r\n    const create = (fields, setSubmitting, resetForm) => {\r\n        axios.post('/api/news/add', fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const update = (fields, setSubmitting, resetForm) => {\r\n        fields['id'] = id\r\n        axios.put(`/api/news/update/${id}`, fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const setFieldValueRef = React.useRef(null)\r\n\r\n    const FieldValueRefHandle = (FieldValueRef) => {\r\n        return setFieldValueRef.current = FieldValueRef\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        options.length === 0 &&\r\n            axios.get('/api/news_types/get_all').then(({ data }) => {\r\n                setOptions(map(data, obj => ({ value: obj.id, text: obj.name })))\r\n            })\r\n        if (!isAddMode) {\r\n            axios.get(`/api/news/get/${id}`).then(({ data }) => {\r\n                console.log(data)\r\n                const fields = map(formObj.items, obj => obj.name);\r\n                forEach(fields, field => setFieldValueRef.current(field, data[field], false));\r\n            })\r\n        }\r\n    }, [options.length, isAddMode, id, formObj.items]);\r\n    return (\r\n        <FormikForm\r\n            formTitle={`${isAddMode ? 'Добавление' : 'Изменение'} новости`}\r\n            FieldValueRefHandle={FieldValueRefHandle}\r\n            formObj={formObj}\r\n            onSubmit={onSubmit}\r\n            BtnComponent={(props) => <AdminBtnsBlock {...props} isAddMode={isAddMode} />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default NewsForm\r\n","import React from 'react';\r\n\r\nimport { FormikCalendarInput, FormikInput, FormikForm, AdminBtnsBlock, FormikSelect, FormikPhoneInput } from '../components'\r\n\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { forEach, map } from 'lodash'\r\n\r\nconst DancerForm = ({ match }) => {\r\n\r\n    const [options, setOptions] = React.useState([])\r\n\r\n    const formObj = {\r\n        items: [\r\n            {\r\n                name: 'fio',\r\n                validation: 'ФИО - обязательное поле',\r\n                component: FormikInput,\r\n                componentProps: {\r\n                    label: 'ФИО',\r\n                    size: 'm',\r\n                    view: 'line',\r\n                    nameComponent: 'fio',\r\n                    id: 'fio',\r\n                    width: 'available'\r\n                }\r\n            },\r\n            {\r\n                name: 'phone',\r\n                validation: 'Телефон -  обязательное поле',\r\n                component: FormikPhoneInput,\r\n                componentProps: {\r\n                    label: 'Телефон',\r\n                    size: 'm',\r\n                    view: 'line',\r\n                    nameComponent: 'phone',\r\n                    id: 'phone',\r\n                    width: 'available',\r\n                    mask: \"+1 (111) 111 1111\",\r\n                    placeholder: \"\"\r\n                }\r\n            },\r\n            {\r\n                name: 'birthday',\r\n                validation: 'Дата рождения - обязательное поле',\r\n                component: FormikCalendarInput,\r\n                componentProps: {\r\n                    size: 'm',\r\n                    label: 'Дата рождения',\r\n                    view: 'line',\r\n                    placeholder: ' ',\r\n                    nameComponent: 'birthday',\r\n                    id: 'birthday',\r\n                    width: 'available',\r\n                    calendar: { width: \"available\" }\r\n                }\r\n            },\r\n            {\r\n                name: 'group_id',\r\n                validation: 'Группа -  обязательное поле',\r\n                component: FormikSelect,\r\n                componentProps: {\r\n                    label: 'Группа',\r\n                    nameComponent: 'group_id',\r\n                    id: 'group_id',\r\n                    size: 'm',\r\n                    placeholder: ' ',\r\n                    options: options,\r\n                    mode: 'radio',\r\n                    view: 'line',\r\n                    width: 'available'\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    const { id } = match.params;\r\n    const isAddMode = !id;\r\n\r\n    const onSubmit = (fields, { setStatus, setSubmitting, resetForm }) => {\r\n        setStatus();\r\n        fields['group_id'] = fields['group_id'][0]\r\n        if (isAddMode) {\r\n            createGroup(fields, setSubmitting, resetForm);\r\n        } else {\r\n            updateGroup(fields, setSubmitting, resetForm);\r\n        }\r\n    }\r\n\r\n    const createGroup = (fields, setSubmitting, resetForm) => {\r\n        axios.post('/api/dancers/add', fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const updateGroup = (fields, setSubmitting, resetForm) => {\r\n        fields['id'] = id\r\n        axios.put(`/api/dancers/update/${id}`, fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const setFieldValueRef = React.useRef(null)\r\n\r\n    const FieldValueRefHandle = (FieldValueRef) => {\r\n        return setFieldValueRef.current = FieldValueRef\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        options.length === 0 &&\r\n            axios.get('/api/groups/get_all').then(({ data }) => {\r\n                setOptions(map(data, obj => ({ value: obj.id, text: `${obj.from_age} - ${obj.age_to}` })))\r\n            })\r\n        if (!isAddMode) {\r\n            axios.get(`/api/dancers/get/${id}`).then(({ data }) => {\r\n                const fields = map(formObj.items, obj => obj.name);\r\n                forEach(fields, field => setFieldValueRef.current(field, data[field], false));\r\n            })\r\n        }\r\n    }, [isAddMode, id, options.length, formObj.items]);\r\n\r\n    return (\r\n        <FormikForm\r\n            formObj={formObj}\r\n            onSubmit={onSubmit}\r\n            formTitle={`${isAddMode ? 'Добавление' : 'Изменение'} танцора`}\r\n            FieldValueRefHandle={FieldValueRefHandle}\r\n            BtnComponent={(props) => <AdminBtnsBlock {...props} isAddMode={isAddMode} />}\r\n        />\r\n\r\n    );\r\n}\r\n\r\nexport default DancerForm;","import React from 'react';\r\n\r\nimport { FormikInput, FormikForm, AdminBtnsBlock } from '../components'\r\n\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { forEach, map } from 'lodash'\r\n\r\nconst formObj = {\r\n    items: [\r\n        {\r\n            name: 'from_age',\r\n            validation: 'От скольки лет - обязательное поле',\r\n            component: FormikInput,\r\n            componentProps: {\r\n                label: 'От скольки лет',\r\n                size: 'm',\r\n                view: 'line',\r\n                nameComponent: 'from_age',\r\n                id: 'from_age',\r\n                width: 'available'\r\n            }\r\n        },\r\n        {\r\n            name: 'age_to',\r\n            validation: 'До сколько лет -  обязательное поле',\r\n            component: FormikInput,\r\n            componentProps: {\r\n                label: 'До скольки лет',\r\n                size: 'm',\r\n                view: 'line',\r\n                nameComponent: 'age_to',\r\n                id: 'age_to',\r\n                width: 'available'\r\n            }\r\n        },\r\n        {\r\n            name: 'price',\r\n            validation: 'Стоимость - обязательное поле',\r\n            component: FormikInput,\r\n            componentProps: {\r\n                label: 'Стоимость',\r\n                size: 'm',\r\n                view: 'line',\r\n                nameComponent: 'price',\r\n                id: 'price',\r\n                width: 'available'\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nconst GroupForm = ({ match }) => {\r\n    const { id } = match.params;\r\n    const isAddMode = !id;\r\n\r\n    const onSubmit = (fields, { setStatus, setSubmitting, resetForm }) => {\r\n        setStatus();\r\n        if (isAddMode) {\r\n            createGroup(fields, setSubmitting, resetForm);\r\n        } else {\r\n            updateGroup(fields, setSubmitting, resetForm);\r\n        }\r\n    }\r\n\r\n    const createGroup = (fields, setSubmitting, resetForm) => {\r\n        axios.post('/api/groups/add', fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const updateGroup = (fields, setSubmitting, resetForm) => {\r\n        fields['id'] = id\r\n        axios.put(`/api/groups/update/${id}`, fields).then(() => {\r\n            setSubmitting();\r\n            resetForm({})\r\n        })\r\n    }\r\n\r\n    const setFieldValueRef = React.useRef(null)\r\n\r\n    const FieldValueRefHandle = (FieldValueRef) => {\r\n        return setFieldValueRef.current = FieldValueRef\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!isAddMode) {\r\n            axios.get(`/api/groups/get/${id}`).then(({ data }) => {\r\n                const fields = map(formObj.items, obj => obj.name);\r\n                forEach(fields, field => setFieldValueRef.current(field, data[field], false));\r\n            })\r\n        }\r\n    }, [isAddMode, id]);\r\n\r\n    return (\r\n        <FormikForm\r\n            formTitle={`${isAddMode ? 'Добавление' : 'Изменение'} группы`}\r\n            isAddMode={isAddMode}\r\n            formObj={formObj}\r\n            onSubmit={onSubmit}\r\n            FieldValueRefHandle={FieldValueRefHandle}\r\n            BtnComponent={(props) => <AdminBtnsBlock {...props} isAddMode={isAddMode} />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default GroupForm;","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// import { forEach } from 'lodash'\r\n// import {withRouter} from 'react-router-dom';\r\n\r\n\r\n// import { fetchDeleteGroup } from '../../redux/actions/groups'\r\n// import axios from 'axios'\r\n\r\nimport {\r\n    Route,\r\n    Switch,\r\n    Redirect\r\n} from \"react-router-dom\"\r\n\r\nimport { TrainerList, DancerList, NewsList, GroupList } from './lists'\r\nimport { TrainerForm, DancerForm, NewsForm, GroupForm } from './forms'\r\nimport { Menu, Tabs, Table } from './components'\r\n\r\nconst Admin = ({ history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [checkedItems, setCheckedItems] = React.useState([])\r\n\r\n    const selectedDelete = (path) => {\r\n        //     const splitPath = path.split('/')\r\n        //     if (window.confirm(`Вы действительно хотите удалить элементы?`)) {\r\n        //         // map(checkedItems, checkedItem => dispatch(fetchDeleteGroup(checkedItem)))\r\n        //         // forEach(checkedItems, checkedItem => axios.delete(`/api/${splitPath[splitPath.length - 1]}/delete/${checkedItem}`))\r\n        //         history.push(path)\r\n        //     }\r\n    }\r\n\r\n    return (\r\n        <div className=\"admin-container\">\r\n            <Menu />\r\n            <div className=\"admin-body\">\r\n                <Tabs selectedDelete={selectedDelete} />\r\n                <Switch>\r\n                    {/* <Route path='/admin' component={DancerList} exact/> */}\r\n                    <Redirect from=\"/admin\" to=\"/admin/dancers\" exact />\r\n\r\n                    <Route path='/admin/dancers' render={() => <DancerList\r\n                        Table={Table}\r\n                        checkedItems={checkedItems}\r\n                        dispatch={dispatch}\r\n                        useSelector={useSelector}\r\n                        setCheckedItems={setCheckedItems}\r\n                    />} exact />\r\n                    <Route path='/admin/dancers/add' component={DancerForm} />\r\n                    <Route path='/admin/dancers/edit/:id' component={DancerForm} />\r\n\r\n                    <Route path='/admin/trainers' render={() => <TrainerList\r\n                        Table={Table}\r\n                        checkedItems={checkedItems}\r\n                        dispatch={dispatch}\r\n                        useSelector={useSelector}\r\n                        setCheckedItems={setCheckedItems}\r\n                    />} exact />\r\n                    <Route path='/admin/trainers/add' component={TrainerForm} />\r\n                    <Route path='/admin/trainers/edit/:id' component={TrainerForm} />\r\n\r\n\r\n                    <Route path='/admin/news'\r\n                        render={() => <NewsList\r\n                            Table={Table}\r\n                            checkedItems={checkedItems}\r\n                            dispatch={dispatch}\r\n                            useSelector={useSelector}\r\n                            setCheckedItems={setCheckedItems}\r\n                        />} exact />\r\n                    <Route path='/admin/news/add' component={NewsForm} />\r\n                    <Route path='/admin/news/edit/:id' component={NewsForm} />\r\n\r\n\r\n                    <Route path='/admin/groups'\r\n                        render={() => <GroupList\r\n                            Table={Table}\r\n                            checkedItems={checkedItems}\r\n                            dispatch={dispatch}\r\n                            useSelector={useSelector}\r\n                            setCheckedItems={setCheckedItems}\r\n                        />} exact />\r\n                    <Route path='/admin/groups/add' component={GroupForm} />\r\n                    <Route path='/admin/groups/edit/:id' component={GroupForm} />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n"],"sourceRoot":""}